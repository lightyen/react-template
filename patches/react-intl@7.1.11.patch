diff --git a/lib/src/components/createIntl.js b/lib/src/components/createIntl.js
index 41aed4dd4c4558867130a8a5fe52b9fdcc85b2a5..7394c8e7cb3ef6b57c9b361fbba2f0961e0069c7 100644
--- a/lib/src/components/createIntl.js
+++ b/lib/src/components/createIntl.js
@@ -6,7 +6,7 @@
 import { __assign, __rest, __spreadArray } from "tslib";
 import { createIntl as coreCreateIntl, formatMessage as coreFormatMessage, } from '@formatjs/intl';
 import { isFormatXMLElementFn, } from 'intl-messageformat';
-import { DEFAULT_INTL_CONFIG, assignUniqueKeysToParts, toKeyedReactNodeArray, } from '../utils';
+import { DEFAULT_INTL_CONFIG, assignUniqueKeysToParts, toReactNodeArray, } from '../utils';
 function assignUniqueKeysToFormatXMLElementFnArgument(values) {
     if (!values) {
         return values;
@@ -30,7 +30,7 @@ var formatMessage = function (config, formatters, descriptor, rawValues) {
         descriptor,
         values], rest, false));
     if (Array.isArray(chunks)) {
-        return toKeyedReactNodeArray(chunks);
+        return toReactNodeArray(chunks);
     }
     return chunks;
 };
diff --git a/lib/src/utils.d.ts b/lib/src/utils.d.ts
index 7a754509248c25bfe2d46c50f38e4da3a230eb8e..351732546de3bc0ddb02e843802132e06018fd66 100644
--- a/lib/src/utils.d.ts
+++ b/lib/src/utils.d.ts
@@ -5,16 +5,6 @@ export declare function invariant(condition: boolean, message: string, Err?: any
 export declare function invariantIntlContext(intl?: any): asserts intl;
 export type DefaultIntlConfig = Pick<ResolvedIntlConfig, 'fallbackOnEmptyString' | 'formats' | 'messages' | 'timeZone' | 'textComponent' | 'defaultLocale' | 'defaultFormats' | 'onError'>;
 export declare const DEFAULT_INTL_CONFIG: DefaultIntlConfig;
-/**
- * Builds an array of {@link React.ReactNode}s with index-based keys, similar to
- * {@link React.Children.toArray}. However, this function tells React that it
- * was intentional, so they won't produce a bunch of warnings about it.
- *
- * React doesn't recommend doing this because it makes reordering inefficient,
- * but we mostly need this for message chunks, which don't tend to reorder to
- * begin with.
- */
-export declare const toKeyedReactNodeArray: typeof React.Children.toArray;
 /**
  * Takes a `formatXMLElementFn`, and composes it in function, which passes
  * argument `parts` through, assigning unique key to each part, to prevent
diff --git a/lib/src/utils.js b/lib/src/utils.js
index 8d728f82aacc7989f59e0bd1b3d39c33ba4872f4..e8f53fa89adc56f2ca05c04b5d91715edcaf7a21 100644
--- a/lib/src/utils.js
+++ b/lib/src/utils.js
@@ -1,6 +1,6 @@
-import { __assign } from "tslib";
-import * as React from 'react';
 import { DEFAULT_INTL_CONFIG as CORE_DEFAULT_INTL_CONFIG } from '@formatjs/intl';
+import * as React from 'react';
+import { __assign } from "tslib";
 export function invariant(condition, message, Err) {
     if (Err === void 0) { Err = Error; }
     if (!condition) {
@@ -12,38 +12,18 @@ export function invariantIntlContext(intl) {
         '<IntlProvider> needs to exist in the component ancestry.');
 }
 export var DEFAULT_INTL_CONFIG = __assign(__assign({}, CORE_DEFAULT_INTL_CONFIG), { textComponent: React.Fragment });
-var arbitraryKeyProps = { key: 42 };
-var toArbitrarilyKeyedReactNode = function (reactNode) {
-    return React.isValidElement(reactNode)
-        ? React.createElement(React.Fragment, arbitraryKeyProps, reactNode)
-        : reactNode;
-};
-/**
- * Builds an array of {@link React.ReactNode}s with index-based keys, similar to
- * {@link React.Children.toArray}. However, this function tells React that it
- * was intentional, so they won't produce a bunch of warnings about it.
- *
- * React doesn't recommend doing this because it makes reordering inefficient,
- * but we mostly need this for message chunks, which don't tend to reorder to
- * begin with.
- */
-export var toKeyedReactNodeArray = function (children) { var _a; 
-/**
- * Note: {@link React.Children.map} will add its own index-based prefix to
- * every key anyway, so the auto-injected one doesn't even have to be unique.
- * This basically just tells React that it's explicit/intentional.
- */
-return (_a = React.Children.map(children, toArbitrarilyKeyedReactNode)) !== null && _a !== void 0 ? _a : []; };
-/**
- * Takes a `formatXMLElementFn`, and composes it in function, which passes
- * argument `parts` through, assigning unique key to each part, to prevent
- * "Each child in a list should have a unique "key"" React error.
- * @param formatXMLElementFn
- */
+export function toReactNodeArray(nodelist) {
+	return React.Children.map(nodelist, (c) => {
+		if (React.isValidElement(c) && c._store) {
+			c._store.validated = 1
+		}
+		return c
+	})
+}
 export function assignUniqueKeysToParts(formatXMLElementFn) {
     return function (parts) {
         // eslint-disable-next-line prefer-rest-params
-        return formatXMLElementFn(React.Children.toArray(parts));
+        return formatXMLElementFn(toReactNodeArray(parts));
     };
 }
 export function shallowEqual(objA, objB) {
diff --git a/react-intl.iife.js b/react-intl.iife.js
index 359eaab174417ac2ea331b36bf59698f5ac13b82..7f1e284b28782ec052425df046e4449df70c4d07 100644
--- a/react-intl.iife.js
+++ b/react-intl.iife.js
@@ -4394,22 +4394,17 @@ var ReactIntl = (() => {
   var DEFAULT_INTL_CONFIG2 = __spreadProps(__spreadValues({}, DEFAULT_INTL_CONFIG), {
     textComponent: React.Fragment
   });
-  var arbitraryKeyProps = { key: 42 };
-  var toArbitrarilyKeyedReactNode = (reactNode) => React.isValidElement(reactNode) ? React.createElement(React.Fragment, arbitraryKeyProps, reactNode) : reactNode;
-  var toKeyedReactNodeArray = (children) => {
-    var _a2;
-    return (
-      /**
-       * Note: {@link React.Children.map} will add its own index-based prefix to
-       * every key anyway, so the auto-injected one doesn't even have to be unique.
-       * This basically just tells React that it's explicit/intentional.
-       */
-      (_a2 = React.Children.map(children, toArbitrarilyKeyedReactNode)) != null ? _a2 : []
-    );
+  var toReactNodeArray = (children) => {
+    return React.Children.map(children, (c) => {
+      if (React.isValidElement(c) && c._store) {
+        c._store.validated = 1
+      }
+      return c
+    })
   };
   function assignUniqueKeysToParts(formatXMLElementFn) {
     return function(parts) {
-      return formatXMLElementFn(React.Children.toArray(parts));
+      return formatXMLElementFn(toReactNodeArray(parts));
     };
   }
   function shallowEqual(objA, objB) {
@@ -4558,7 +4553,7 @@ var ReactIntl = (() => {
       ...rest
     );
     if (Array.isArray(chunks)) {
-      return toKeyedReactNodeArray(chunks);
+      return toReactNodeArray(chunks);
     }
     return chunks;
   };
diff --git a/src/components/createIntl.js b/src/components/createIntl.js
index 888976b4b2fadb9c2f1a492f6257ffc683ea5653..6c3ecb6ee03a8bd0d6816b6c5095080bd0716be0 100644
--- a/src/components/createIntl.js
+++ b/src/components/createIntl.js
@@ -33,7 +33,7 @@ var formatMessage = function (config, formatters, descriptor, rawValues) {
         descriptor,
         values], rest, false));
     if (Array.isArray(chunks)) {
-        return (0, utils_1.toKeyedReactNodeArray)(chunks);
+        return (0, utils_1.toReactNodeArray)(chunks);
     }
     return chunks;
 };
diff --git a/src/utils.d.ts b/src/utils.d.ts
index 7a754509248c25bfe2d46c50f38e4da3a230eb8e..351732546de3bc0ddb02e843802132e06018fd66 100644
--- a/src/utils.d.ts
+++ b/src/utils.d.ts
@@ -5,16 +5,6 @@ export declare function invariant(condition: boolean, message: string, Err?: any
 export declare function invariantIntlContext(intl?: any): asserts intl;
 export type DefaultIntlConfig = Pick<ResolvedIntlConfig, 'fallbackOnEmptyString' | 'formats' | 'messages' | 'timeZone' | 'textComponent' | 'defaultLocale' | 'defaultFormats' | 'onError'>;
 export declare const DEFAULT_INTL_CONFIG: DefaultIntlConfig;
-/**
- * Builds an array of {@link React.ReactNode}s with index-based keys, similar to
- * {@link React.Children.toArray}. However, this function tells React that it
- * was intentional, so they won't produce a bunch of warnings about it.
- *
- * React doesn't recommend doing this because it makes reordering inefficient,
- * but we mostly need this for message chunks, which don't tend to reorder to
- * begin with.
- */
-export declare const toKeyedReactNodeArray: typeof React.Children.toArray;
 /**
  * Takes a `formatXMLElementFn`, and composes it in function, which passes
  * argument `parts` through, assigning unique key to each part, to prevent
diff --git a/src/utils.js b/src/utils.js
index eaefb08cdd91c947b59f45e4afde2def6c0b36f2..7d6da33f0aee5e00f30a6071a6c5a76d83912c86 100644
--- a/src/utils.js
+++ b/src/utils.js
@@ -1,6 +1,5 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.toKeyedReactNodeArray = exports.DEFAULT_INTL_CONFIG = void 0;
 exports.invariant = invariant;
 exports.invariantIntlContext = invariantIntlContext;
 exports.assignUniqueKeysToParts = assignUniqueKeysToParts;
@@ -19,29 +18,15 @@ function invariantIntlContext(intl) {
         '<IntlProvider> needs to exist in the component ancestry.');
 }
 exports.DEFAULT_INTL_CONFIG = tslib_1.__assign(tslib_1.__assign({}, intl_1.DEFAULT_INTL_CONFIG), { textComponent: React.Fragment });
-var arbitraryKeyProps = { key: 42 };
-var toArbitrarilyKeyedReactNode = function (reactNode) {
-    return React.isValidElement(reactNode)
-        ? React.createElement(React.Fragment, arbitraryKeyProps, reactNode)
-        : reactNode;
-};
-/**
- * Builds an array of {@link React.ReactNode}s with index-based keys, similar to
- * {@link React.Children.toArray}. However, this function tells React that it
- * was intentional, so they won't produce a bunch of warnings about it.
- *
- * React doesn't recommend doing this because it makes reordering inefficient,
- * but we mostly need this for message chunks, which don't tend to reorder to
- * begin with.
- */
-var toKeyedReactNodeArray = function (children) { var _a; 
-/**
- * Note: {@link React.Children.map} will add its own index-based prefix to
- * every key anyway, so the auto-injected one doesn't even have to be unique.
- * This basically just tells React that it's explicit/intentional.
- */
-return (_a = React.Children.map(children, toArbitrarilyKeyedReactNode)) !== null && _a !== void 0 ? _a : []; };
-exports.toKeyedReactNodeArray = toKeyedReactNodeArray;
+var toReactNodeArray = function (nodelist) {
+	return React.Children.map(nodelist, (c) => {
+		if (React.isValidElement(c) && c._store) {
+			c._store.validated = 1
+		}
+		return c
+	})
+}
+exports.toReactNodeArray = toReactNodeArray;
 /**
  * Takes a `formatXMLElementFn`, and composes it in function, which passes
  * argument `parts` through, assigning unique key to each part, to prevent
